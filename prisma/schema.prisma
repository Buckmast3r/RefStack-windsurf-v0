// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum SubscriptionPlan {
  FREE
  PRO
}

enum AddonType {
  CUSTOM_DOMAIN
  WHITELABEL
  API_ACCESS
  AUTO_EXPIRING_LINKS
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String               @id @default(cuid())
  name              String?
  email             String               @unique
  emailVerified     DateTime?
  hashedPassword    String?
  image             String?
  avatarUrl         String?
  accounts          Account[]
  sessions          Session[]
  referralLinks     ReferralLink[]
  subscription      Subscription?
  userPreference    UserPreference?
  addons            UserAddon[]
  notifications     Notification[]
  customDomains     CustomDomain[]
  bannerUrl         String?
  logoUrl           String?
  bio               String?
  socialLinks       Json?               @default("{}") // store as json
  username          String?             @unique
  phoneNumber       String?
  address           String?
  company           String?
  title             String?
  primaryColor      String?             @default("#0070f3") // default primary color
  publicProfile     Boolean             @default(true) // is public profile enabled
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserPreference {
  id           String    @id @default(cuid())
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme        String    @default("system")
  emailUpdates Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model ReferralLink {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  url         String
  shortCode   String   @unique
  description String?  @db.Text
  customLogo  String?
  customColor String?
  customSlug  String?  @unique
  clicks      Click[]
  conversions Int      @default(0)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Click {
  id             String       @id @default(cuid())
  referralLinkId String
  referralLink   ReferralLink @relation(fields: [referralLinkId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  ip             String?
  userAgent      String?
  country        String?
  city           String?
  browser        String?
  os             String?
  device         String?
  referer        String?
  converted      Boolean      @default(false)
  conversionData Json?
  createdAt      DateTime     @default(now())
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @unique
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan                 String    @default("FREE")
  status               String    @default("ACTIVE") // ACTIVE, CANCELED, PAST_DUE, UNPAID, TRIALING
  startDate            DateTime  @default(now())
  endDate              DateTime?
  trialEndDate         DateTime?
  cancelAtPeriodEnd    Boolean   @default(false)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  stripePriceId        String?
  paypalSubscriptionId String?
  features             Json?     @default("{}")
  maxLinks             Int       @default(5)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model UserProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio            String?  @db.Text
  website        String?
  twitterHandle  String?
  githubHandle   String?
  linkedinHandle String?
  telegramHandle String?
  company        String?
  location       String?
  timezone       String?  @default("UTC")
  avatarUrl      String?
  bannerUrl      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model SubscriptionPlan {
  id            String  @id @default(cuid())
  name          String  @unique
  description   String
  price         Float
  interval      String  @default("month") // month, year
  currency      String  @default("USD")
  stripePriceId String?
  paypalPlanId  String?
  features      Json?   @default("{}")
  isPublic      Boolean @default(true)
  active        Boolean @default(true)
  maxLinks      Int     @default(5)
  priority      Int     @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Invoice {
  id               String    @id @default(cuid())
  userId           String
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount           Float
  currency         String    @default("USD")
  status           String    @default("PENDING") // PENDING, PAID, FAILED, REFUNDED
  stripeInvoiceId  String?
  stripePriceId    String?
  stripeCustomerId String?
  paypalInvoiceId  String?
  paymentMethod    String?
  paidAt           DateTime?
  invoiceDate      DateTime  @default(now())
  dueDate          DateTime
  items            Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model PaymentMethod {
  id                   String   @id @default(cuid())
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type                 String   // CARD, PAYPAL, CRYPTO
  stripePaymentMethodId String?
  paypalPaymentMethodId String?
  cryptoAddress        String?
  cryptoType           String?
  brand                String?
  last4                String?
  expMonth             Int?
  expYear              Int?
  isDefault            Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Addon {
  id            String      @id @default(cuid())
  name          String      @unique
  description   String
  price         Float
  currency      String      @default("USD")
  stripePriceId String?
  paypalPlanId  String?
  isPublic      Boolean     @default(true)
  active        Boolean     @default(true)
  userAddons    UserAddon[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model UserAddon {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  addonId   String
  addon     Addon    @relation(fields: [addonId], references: [id], onDelete: Cascade)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, addonId])
}

model CustomDomain {
  id            String   @id @default(cuid())
  domain        String   @unique
  verified      Boolean  @default(false)
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  dnsVerified   Boolean  @default(false)
  sslProvisioned Boolean  @default(false)
  status        String   @default("pending") // pending, active, error
  errorMessage  String?  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  message   String
  read      Boolean  @default(false)
  type      String   @default("INFO") // INFO, SUCCESS, WARNING, ERROR
  link      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  key         String   @unique
  permissions String[] // READ, WRITE, DELETE
  lastUsed    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Webhook {
  id          String   @id @default(cuid())
  userId      String
  url         String
  events      String[] // CLICK, CONVERSION, SUBSCRIPTION
  secret      String?
  active      Boolean  @default(true)
  lastTriggered DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String
  entityId  String?
  metadata  Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
}

model SessionEvent {
  id        String   @id @default(cuid())
  sessionId String   // Client-side generated session ID
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  @@index([sessionId])
  @@index([userId])
  @@index([createdAt])
  ipAddress String?
  userAgent String?
  referrer  String?
  country   String?
  region    String?
  city      String?
  device    String?
  browser   String?
  os        String?
  createdAt DateTime @default(now())
  expiresAt DateTime @default(dbgenerated("(now() + '30 days'::interval)"))

  @@index([sessionId])
  @@index([userId])
  @@index([createdAt])
}
