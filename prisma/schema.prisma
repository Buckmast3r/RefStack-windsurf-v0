// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Make sure DATABASE_URL is set in your .env.local file
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String    @unique
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  passwordHash  String?   @map("password_hash") // For custom auth; if using Supabase Auth, this might be handled differently or not stored here
  avatarUrl     String?   @map("avatar_url")
  bannerUrl     String?   @map("banner_url")
  bio           String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts      Account[]
  sessions      Session[]
  referralLinks ReferralLink[]
  userPreference UserPreference? 
  subscriptions Subscription[]
  addons        Addon[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model UserPreference {
  id        String   @id @default(cuid())
  userId    String   @unique @map("user_id") // Ensures one-to-one with User
  theme     String?  // e.g., 'default', 'sunset', 'forest', 'midnight'
  showPublicProfile Boolean @default(true) @map("show_public_profile")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model ReferralLink {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  name            String    // e.g., "Coinbase", "Amazon Audible"
  url             String    // The actual referral destination URL
  shortCode       String    @unique @map("short_code") // For /r/[shortCode] redirection
  customSlug      String?   @unique @map("custom_slug") // Optional vanity slug for public profile
  description     String?
  category        String?   // e.g., "Crypto", "Books", "Software"
  logoUrl         String?   @map("logo_url") // URL to the company logo
  logoColor       String?   @map("logo_color") // Dominant color for the logo/card
  status          String    @default("ACTIVE") // ACTIVE, INACTIVE, ARCHIVED
  displayOrder    Int?      @map("display_order") // For ordering on public stack page
  
  clicks          Int       @default(0) // Denormalized count, can be updated by triggers or batch jobs
  conversions     Int       @default(0) // Denormalized count

  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  clickEvents     ClickEvent[]

  @@index([userId])
  @@map("referral_links")
}

model ClickEvent {
  id              String    @id @default(cuid())
  referralLinkId  String    @map("referral_link_id")
  ipAddress       String?   @map("ip_address") // Consider privacy implications and regulations (e.g., GDPR)
  userAgent       String?   @map("user_agent")
  timestamp       DateTime  @default(now())
  country         String?   // GeoIP lookup result
  city            String?   // GeoIP lookup result
  
  referralLink    ReferralLink @relation(fields: [referralLinkId], references: [id], onDelete: Cascade)

  @@index([referralLinkId])
  @@map("click_events")
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  planName  String   @map("plan_name") // e.g., "free", "pro", "enterprise"
  status    String   // e.g., "active", "cancelled", "past_due"
  startDate DateTime @map("start_date")
  endDate   DateTime? @map("end_date")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Addon {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  name      String   // Name of the addon, e.g., "Advanced Analytics", "Custom Domain"
  status    String   // e.g., "active", "inactive"
  purchasedAt DateTime @default(now()) @map("purchased_at")
  expiresAt DateTime? @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addons")
}
